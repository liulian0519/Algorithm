#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#define true 1
#define false 0
#define OPSETSIZE 8
typedef int Status;
unsigned char Prior[8][8]=
{
	// 运算符优先级表 
 // '+' '-' '*' '/' '(' ')' '#' '^' 
 /*'+'*/'>','>','<','<','<','>','>','<', 
 /*'-'*/'>','>','<','<','<','>','>','<', 
 /*'*'*/'>','>','>','>','<','>','>','<', 
 /*'/'*/'>','>','>','>','<','>','>','<', 
 /*'('*/'<','<','<','<','<','=',' ','<', 
 /*')'*/'>','>','>','>',' ','>','>','>', 
 /*'#'*/'<','<','<','<','<',' ','=','<', 
 /*'^'*/'>','>','>','>','<','>','>','>' 
	
};
typedef struct stackchar
{
	char c;
	struct stackchar *next;
}SC;
typedef struct stackfloat
{
	float f;
	struct stackfloat *next;
}SF;
SC *push(SC *s,char c)
{
	SC *p=(SC*)malloc(sizeof(SC));
	p->c=c;
	p->next=s;
	return p;
}
SF *push(SF *s,float f)
{
	SF *p=(SF*)malloc(sizeof(SF));
	p->f=f;
	p->next=s;
	return p;
}
SC *pop(SC *s)
{
	SC *q=s;
	s=s->next;
	free(q);
	return s;
}
SF *pop(SF *s)
{
	SF *q=s;
	s=s->next;
	free(q);
	return s;
}
float operate(float a,unsigned char theta,float b)
{
	switch(theta)
	{
		case '+': return a+b; break;
		case '-': return a-b; break;
		case '*': return a*b; break;
		case '/': return a/b; break;
		case '^': return pow(a,b); break;
		default : return 0; break;
	}
}
char opset[OPSETSIZE]={'+','-','*','/','(',')','#','^'};
Status In(char Test,char *TestOp)
{
	int find=false;
	for(int i= 0;i<OPSETSIZE;i++)
	{
		if(Test==TestOp[i])
		find=true;
	}
	return find;
}
Status ReturnOpOrd(char op,char *TestOp)
{
	for(int i=0;i<OPSETSIZE;i++)
	{
		if(op==TestOp[i])
			return i;
	}
}
char precede(char Aop,char Bop)
{
	return Prior[ReturnOpOrd(Aop,opset)][ReturnOpOrd(Bop,opset)];
}
float EvaluateExpression(char* MyExpression)
{
	SC *OPTR=NULL;
	SF *OPND=NULL;
	char Temdata[20];
	float data,a,b;
	char theta,*c,Dr[]={'#','\0'};
	OPTR=push(OPTR,'#');
	c=strcat(MyExpression,Dr);
	strcpy(Temdata,"\0");
	while(*c!='#' || OPTR->c!='#')
	{
		if(!In(*c,opset))
		{
			Dr[0]=*c;
			strcat(Temdata,Dr);
			c++;
			if(In(*c,opset))
			{
				data=atof(Temdata);
				OPND=push(OPND,data);
				strcpy(Temdata,"\0");
			}	
		}
		else
		{
			switch(precede(OPTR->c,*c))
			{
				case '<':
					OPTR=push(OPTR,*c);
					c++;
					break;
				case '=':
					OPTR=pop(OPTR);
					c++;
					break;
				case '>':
					theta=OPTR->c; OPTR=pop(OPTR);
					b=OPND->f; OPND=pop(OPND);
					a=OPND->f; OPND=pop(OPND);
					OPND=push(OPND,operate(a,theta,b));
					break;
			}
		}
	}
	return OPND->f;
}
int main()
{

	char s[128];
	puts("请输入表达式："); 
	gets(s);
	puts("该表达式的值为：");
	printf("%s\b=%g\n",s,EvaluateExpression(s));
	system("pause");
	return 0; 
	 
}